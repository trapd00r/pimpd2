let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <Down> <Nop>
inoremap <Up> <Nop>
inoremap <Left> <Nop>
noremap  
map  <Left>
map <NL> <Down>
map  <Up>
map  <Right>
map   /
nmap <silent> ,PV <Plug>PerlHelpVarAsk
vmap <silent> ,pv <Plug>PerlHelpVarVisual
nmap <silent> ,pv <Plug>PerlHelpVarNormal
nmap <silent> ,PQ <Plug>PerlHelpFAQAsk
vmap <silent> ,pq <Plug>PerlHelpFAQVisual
nmap <silent> ,pq <Plug>PerlHelpFAQNormal
nmap <silent> ,PM <Plug>PerlHelpModAsk
vmap <silent> ,pm <Plug>PerlHelpModVisual
nmap <silent> ,pm <Plug>PerlHelpModNormal
nmap <silent> ,PF <Plug>PerlHelpFuncAsk
vmap <silent> ,pf <Plug>PerlHelpFuncVisual
nmap <silent> ,pf <Plug>PerlHelpFuncNormal
nmap <silent> ,PH <Plug>PerlHelpAsk
vmap <silent> ,ph <Plug>PerlHelpVisual
nmap <silent> ,ph <Plug>PerlHelpNormal
nnoremap ,d iuse Data::Dumper;$Data::Dumper::Terse		 = 1;$Data::Dumper::Indent		 = 1;$Data::Dumper::Useqq		 = 1;$Data::Dumper::Deparse	 = 1;$Data::Dumper::Quotekeys = 0;$Data::Dumper::Sortkeys  = 1;
nnoremap ,p i#!/usr/bin/perl<BS>our $APP     = undef;our $VERSION = '0.1.0';use strict;use Data::Dumper;use Pod::Usage;use Getopt::Long;=pod=head1 NAME=head1 USAGE=head1 DESCRIPTION=head1 OPTIONS=head1 AUTHORWritten by Magnus Woldrich=head1 REPORTING BUGSReport bugs to trapd00r@trapd00r.se=head1 COPYRIGHTCopyright (C) 2010 Magnus WoldrichLicense GPLv2=cut10ggi
nnoremap ,s :%s/\s\+$//:let @/=''
vnoremap / /\v
nnoremap / /\v
map @ I#
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
noremap <Down> <Nop>
noremap <Up> <Nop>
noremap <Right> <Nop>
noremap <Left> <Nop>
map <C-Space> ?
map Â² :s/^#//$
cmap W w
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set completeopt=menu,preview,menuone
set cscopeprg=/usr/local/bin/cscope
set cscopetag
set cscopeverbose
set noequalalways
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set gdefault
set helplang=en
set history=50
set hlsearch
set ignorecase
set incsearch
set isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=,:
set laststatus=2
set listchars=tab:-\ ,trail:-
set matchtime=2
set maxfuncdepth=1000
set ruler
set rulerformat=%30(%=:b%n%y%m%r%w\ %l,%c%V\ %P%)
set scrolloff=3
set shiftwidth=2
set shortmess=aIoO
set showcmd
set showmatch
set smartcase
set smartindent
set smarttab
set splitbelow
set statusline=%<[%02n]\ %F%(\ %m%h%w%y%r%)\ %a%=\ %8l,%c%V/%L\ (%P)\ [%08O:%02B]
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set noswapfile
set tabstop=2
set textwidth=80
set undofile
set undolevels=512
set visualbell
set wildmode=list:longest,full
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/devel/pimpd-ng2
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 ./app.pl
badd +0 ./Makefile.PL
badd +0 ./lib/App/Pimpd.pm
badd +0 ./lib/App/Pimpd/Collection/Search.pm
badd +0 ./lib/App/Pimpd/Validate.pm
badd +0 ./lib/App/Pimpd/Info.pm
badd +0 ./lib/App/Pimpd/Playlist/Add.pm
badd +0 ./lib/App/Pimpd/Playlist/Randomize.pm
badd +0 ./lib/App/Pimpd/Playlist/Search.pm
args ./app.pl ./Makefile.PL ./lib/App/Pimpd.pm ./lib/App/Pimpd/Collection/Search.pm ./lib/App/Pimpd/Validate.pm ./lib/App/Pimpd/Info.pm ./lib/App/Pimpd/Playlist/Add.pm ./lib/App/Pimpd/Playlist/Randomize.pm ./lib/App/Pimpd/Playlist/Search.pm
edit ./app.pl
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en_us
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit ./Makefile.PL
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
2argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit ./lib/App/Pimpd.pm
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
3argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit ./lib/App/Pimpd/Collection/Search.pm
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
4argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit ./lib/App/Pimpd/Validate.pm
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
5argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit ./lib/App/Pimpd/Info.pm
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
6argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit ./lib/App/Pimpd/Playlist/Add.pm
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
7argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit ./lib/App/Pimpd/Playlist/Randomize.pm
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
8argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabedit ./lib/App/Pimpd/Playlist/Search.pm
set splitbelow splitright
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
9argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
nmap <buffer> <silent> <NL> i=Perl_JumpCtrlJ()
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger():redraw!
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
noremap <buffer> <silent> \rr :call Perl_Run()
map <buffer> <silent> \rpnc :call perlsupportprofiling#Perl_NYTprofReadCSV("read","line")
map <buffer> <silent> \rpn :call perlsupportprofiling#Perl_NYTprof()
map <buffer> <silent> \rpf :call perlsupportprofiling#Perl_Fastprof()
map <buffer> <silent> \rps :call perlsupportprofiling#Perl_Smallprof()
map <buffer> <silent> \podt :call Perl_POD('text')
map <buffer> <silent> \podm :call Perl_POD('man')
map <buffer> <silent> \podh :call Perl_POD('html')
map <buffer> <silent> \pod :call Perl_PodCheck()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call perlsupportregex#Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xmm :call perlsupportregex#Perl_RegexMatchSeveral( )
nnoremap <buffer> <silent> \xm :call perlsupportregex#Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call perlsupportregex#Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call perlsupportregex#Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call perlsupportregex#Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine", "v")
nnoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
vnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe", "v" )
nnoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
vnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file", "v" )
nnoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
vnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file", "v" )
nnoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
nnoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
nnoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
nnoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
nnoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
nnoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
nnoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
nnoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
nnoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
nnoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
nnoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
nnoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
nnoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
noremap <buffer> <silent> \ntr :call Perl_RereadTemplates()
noremap <buffer> <silent> \ntg :call Perl_EditTemplates("global")
noremap <buffer> <silent> \ntl :call Perl_EditTemplates("local")
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block", "v" )
vnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while", "v" )
vnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until", "v" )
vnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else", "v" )
vnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless", "v" )
vnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif", "v" )
vnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else", "v" )
vnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else", "v" )
vnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if", "v" )
vnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach", "v" )
vnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for", "v" )
vnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while", "v" )
nnoremap <buffer> <silent> \sb :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call Perl_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
nnoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
nnoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
nnoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
nnoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
nnoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
nnoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
nnoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
nnoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
nnoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")
nnoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
nnoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
nnoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
nnoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
nnoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
nnoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
nnoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
nnoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
nnoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
nnoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
nnoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
nnoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
nnoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
map <buffer> <silent> \hp :call Perl_HelpPerlsupport()
vnoremap <buffer> { s{}kp=iB
noremap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
imap <buffer> <silent> <NL> =Perl_JumpCtrlJ()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ifu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \isu :call Perl_InsertTemplate("idioms.subroutine")
inoremap <buffer> <silent> \ipi :call Perl_InsertTemplate("idioms.open-pipe")
inoremap <buffer> <silent> \io :call Perl_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \ii :call Perl_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \ip :call Perl_InsertTemplate("idioms.print")
inoremap <buffer> <silent> \it :call Perl_InsertTemplate("idioms.translate")
inoremap <buffer> <silent> \is :call Perl_InsertTemplate("idioms.substitute")
inoremap <buffer> <silent> \im :call Perl_InsertTemplate("idioms.match")
inoremap <buffer> <silent> \ir :call Perl_InsertTemplate("idioms.regex")
inoremap <buffer> <silent> \%= :call Perl_InsertTemplate("idioms.hash-assign")
inoremap <buffer> <silent> \% :call Perl_InsertTemplate("idioms.hash")
inoremap <buffer> <silent> \@= :call Perl_InsertTemplate("idioms.array-assign")
inoremap <buffer> <silent> \@ :call Perl_InsertTemplate("idioms.array")
inoremap <buffer> <silent> \$$ :call Perl_InsertTemplate("idioms.scalar2")
inoremap <buffer> <silent> \$= :call Perl_InsertTemplate("idioms.scalar-assign")
inoremap <buffer> <silent> \$ :call Perl_InsertTemplate("idioms.scalar")
inoremap <buffer> <silent> \sw :call Perl_InsertTemplate("statements.while")
inoremap <buffer> <silent> \st :call Perl_InsertTemplate("statements.until")
inoremap <buffer> <silent> \sue :call Perl_InsertTemplate("statements.unless-else")
inoremap <buffer> <silent> \su :call Perl_InsertTemplate("statements.unless")
inoremap <buffer> <silent> \sei :call Perl_InsertTemplate("statements.elsif")
inoremap <buffer> <silent> \se :call Perl_InsertTemplate("statements.else")
inoremap <buffer> <silent> \sie :call Perl_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \si :call Perl_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sfe :call Perl_InsertTemplate("statements.foreach")
inoremap <buffer> <silent> \sf :call Perl_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sd :call Perl_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \ct :call Perl_InsertDateAndTime("dt")a
inoremap <buffer> <silent> \cd :call Perl_InsertDateAndTime("d")a
inoremap <buffer> <silent> \ckn $:call Perl_InsertTemplate("comment.keyword-keyword")
inoremap <buffer> <silent> \cko $:call Perl_InsertTemplate("comment.keyword-workaround")
inoremap <buffer> <silent> \ckw $:call Perl_InsertTemplate("comment.keyword-warning")
inoremap <buffer> <silent> \ckr $:call Perl_InsertTemplate("comment.keyword-tricky")
inoremap <buffer> <silent> \ckt $:call Perl_InsertTemplate("comment.keyword-todo")
inoremap <buffer> <silent> \ckb $:call Perl_InsertTemplate("comment.keyword-bug")
inoremap <buffer> <silent> \chpo :call Perl_InsertTemplate("comment.file-description-pod")
inoremap <buffer> <silent> \cht :call Perl_InsertTemplate("comment.file-description-t")
inoremap <buffer> <silent> \chpm :call Perl_InsertTemplate("comment.file-description-pm")
inoremap <buffer> <silent> \chpl :call Perl_InsertTemplate("comment.file-description-pl")
inoremap <buffer> <silent> \cm :call Perl_InsertTemplate("comment.method")
inoremap <buffer> <silent> \cfu :call Perl_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cfr :call Perl_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
imap <buffer> <silent> \hp :call Perl_HelpPerlsupport()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0],0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/usr/lib/perl5/site_perl,/usr/share/perl5/site_perl,/usr/lib/perl5/vendor_perl,/usr/share/perl5/vendor_perl,/usr/lib/perl5/core_perl,/usr/share/perl5/core_perl,/usr/lib/perl5/site_perl/5.10.1,/usr/share/perl5/site_perl/5.10.1,/usr/lib/perl5/current,/usr/lib/perl5/site_perl/current,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=aIoO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
