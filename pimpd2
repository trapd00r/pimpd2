#!/usr/bin/perl
use vars qw($VERSION);
my $APP;

$APP     = 'pimpd2';
$VERSION = 0.02;

use lib '/home/scp1/devel/pimpd-ng2/lib';

use strict;

use App::Pimpd;
use App::Pimpd::Player;
use App::Pimpd::Info;
use App::Pimpd::Shell;
use App::Pimpd::Commands;
use App::Pimpd::Transfer;
#use App::Pimpd::Validate;
use App::Pimpd::Collection::Search;
use App::Pimpd::Collection::Album;
use App::Pimpd::Playlist;
use App::Pimpd::Playlist::Search;
use App::Pimpd::Playlist::Add;
use App::Pimpd::Playlist::Remove;
use App::Pimpd::Playlist::Randomize;

use Term::ExtendedColor;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

$Data::Dumper::Terse     = 1;
$Data::Dumper::Indent    = 1;
$Data::Dumper::Useqq     = 1;
$Data::Dumper::Deparse   = 1;
$Data::Dumper::Quotekeys = 0;
$Data::Dumper::Sortkeys  = 1;


GetOptions(
  'np|now-playing'       => sub { print current(), "\n"; },
  'i|information'        => \&info,
  'lsa|list-songs'       => sub { _lsa(@ARGV); },
  'ra|random-album:i'    => sub { print "$_\n" for randomize_albums(@ARGV); },
  'rt|random_track'      => sub { random_track_in_playlist(); },
  'a|add'                => sub { _add(@ARGV); },
  'aa|add-album'         => sub { @_ = map { $_->file } songs_on_album; add(@_); },
  'p|play'               => sub { play(); },
  's|stop'               => sub { stop(); },
  'k|kill'               => sub { player_destruct(); },
  'sh|shell'             => sub { spawn_shell(@ARGV); },
  'rma|remove-album'     => sub { remove_album_from_playlist(@ARGV); },

  'cp'                   => sub { cp(@ARGV ? @ARGV : $target_directory) },
  'cpa'                  => sub { cp_album(@ARGV ? @ARGV : $target_directory) },

  'spl|search-playlist'  => sub { _search_playlist(@ARGV); },
  'sdb|search-db'        => sub { print "$_\n" for search_db_quick(@ARGV); },

  'sar|search-artist'    => sub { print "$_\n" for search_db_artist(@ARGV); },
  'sal|search-album'     => sub { print "$_\n" for search_db_album(@ARGV); },
  'set|search-title'     => sub { print "$_\n" for search_db_title(@ARGV); },

  'next'                 => sub { next_track(); },
  'prev'                 => sub { previous_track(); },
  'clear'                => sub { clear_playlist(); },
  'crop'                 => sub { crop(@ARGV); },
  'crossfade|xfade'      => sub { crossfade(@ARGV); },
  'pause'                => sub { toggle_pause; },
  'repeat'               => sub { toggle_repeat; },
  'random'               => sub { toggle_random; },

  help  => \&usage,
);

sub _lsa {
  my($album, $artist) = @_;

  $album or $album = $mpd->current->album;
  print "$_\n" for songs_on_album($album, $artist);
}

sub _search_playlist {
  my $result = search_playlist(@_); # hashref

  if( keys(%{$result}) < 2 ) {
    play_pos_from_playlist( keys(%{$result}) );
  }
  queue(keys(%{$result})); #FIXME queue should take arrayref
}


# Wrapper for add_to_playlist()
sub _add {
  my @files = @_;

  if(!-t STDIN) {
    while(<STDIN>) {
      push(@files, $_);
    }
  }
  add_to_playlist(@files);
}

sub usage() {
  print "$APP v$VERSION\n\n";
  pod2usage(verbose => 1);
  exit 0;
}

=pod

=head1 NAME

pimpd2

=head1 DESCRIPTION

Hello.

=head1 OPTIONS

  -np,   --now-playing      basic song info on a single line
  -i,    --info             full song info
  -lsa,  --songs            list songs on album str
  -r,    --randomize        randomize a new playlist with n tracks
  -ra,   --random-album     add n random full albums
  -a,    --add              add files to playlist
  -rma,  --remove-album     remove album matching pattern from playlist
  -cp,   --copy             copy the current track to destination
  -cpa,  --copy-album       copy the current album to destination
  -sh,   --shell            spawn the interactive shell
  -q,    --queue            queue tracks
  -lsa,  --list-songs       list all songs on album

=head2 Search

  -sdb,  --search-db        search database for str
  -sar,  --search-artist    search database for artist
  -sal,  --search-album     search database for album
  -set,  --search-title     search database for title

  -spl,  --search-playlist  search the current playlist for str

=head2 Controls

  -cl,   --clear            clear the playlist
  -cr,   --crop             remove all songs but the current one from playlist
  -n,    --next             next track in playlist
  -p,    --previous         previous track in playlist
  -x,    --xfade            set crossfade
         --pause            toggle playback status
         --repeat           toggle repeat mode
         --random           toggle random mode

  -p,    --play             start playback (locally and remote)
  -s,    --stop             stop playback (locally and remote)
  -k,    --kill             stop playback (locally)

  -h,    --help             show this help

=head1 AUTHOR

Written by Magnus Woldrich

=head1 REPORTING BUGS

Report bugs to trapd00r@trapd00r.se

=head1 COPYRIGHT

Copyright (C) 2010 Magnus Woldrich

License GPLv2

=cut
